definitions:
  dto.AddUser:
    properties:
      password:
        minLength: 4
        type: string
      role_id:
        minimum: 0
        type: integer
      user_name:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - password
    - user_name
    type: object
  dto.Auth:
    properties:
      password:
        minLength: 4
        type: string
      user_name:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - password
    - user_name
    type: object
  dto.ChangePassword:
    properties:
      new_password:
        minLength: 4
        type: string
      old_password:
        minLength: 4
        type: string
    required:
    - new_password
    - old_password
    type: object
  dto.CreateRole:
    properties:
      is_admin:
        type: boolean
      role_key:
        type: string
      role_name:
        type: string
    type: object
  dto.JSONTime:
    properties:
      time.Time:
        type: string
    type: object
  dto.Struct:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      time:
        $ref: '#/definitions/dto.JSONTime'
    type: object
info:
  contact: {}
  title: Healthcare panel
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: User Login
      parameters:
      - description: user login
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.Auth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Struct'
        "400":
          description: wrong request parameter
          schema:
            $ref: '#/definitions/dto.Struct'
        "401":
          description: The corresponding username or password is incorrect
          schema:
            $ref: '#/definitions/dto.Struct'
      security:
      - ApiKeyAuth: []
      summary: User Login
      tags:
      - Auth
  /role:
    post:
      consumes:
      - application/json
      description: Create role
      parameters:
      - description: role_id
        in: path
        name: role_id
        required: true
        type: integer
      - description: "YES"
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Struct'
        "400":
          description: wrong request parameter
          schema:
            $ref: '#/definitions/dto.Struct'
      security:
      - ApiKeyAuth: []
      summary: Create role
      tags:
      - Role
  /user:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: create new user
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Struct'
        "400":
          description: wrong request parameter
          schema:
            $ref: '#/definitions/dto.Struct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Struct'
      security:
      - ApiKeyAuth: []
      summary: create user
      tags:
      - User
  /user/change_password:
    put:
      consumes:
      - application/json
      description: Change password
      parameters:
      - description: user change password
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Struct'
      security:
      - ApiKeyAuth: []
      summary: Change password
      tags:
      - User
  /user/logout:
    put:
      consumes:
      - application/json
      description: User logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Struct'
      security:
      - ApiKeyAuth: []
      summary: User Logout
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: 'header like: Bearer xxxx'
    name: Authorization
    type: apiKey
swagger: "2.0"
